# Generated by Django 2.0.3 on 2018-06-11 08:27

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email')),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, verbose_name='Телефон')),
            ],
            options={
                'verbose_name_plural': 'users',
                'verbose_name': 'user',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AcademicGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group_name', models.CharField(max_length=15, unique=True, verbose_name='Название_группы')),
            ],
            options={
                'verbose_name_plural': 'Академические группы',
                'verbose_name': 'Академическая группа',
            },
        ),
        migrations.CreateModel(
            name='GroupAccess',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level_access', models.PositiveSmallIntegerField()),
                ('degree', models.CharField(max_length=10, unique=True)),
            ],
            options={
                'verbose_name_plural': 'Уровень доступа групп',
                'verbose_name': 'Уровень доступа группы',
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Название поста')),
                ('url_to_videopost', models.CharField(blank=True, max_length=200, null=True, unique=True, verbose_name='Ссылка на видеоролик')),
                ('content', models.TextField(blank=True, null=True, verbose_name='Содержимое поста')),
                ('post_type', models.BooleanField(default=True, verbose_name='Тип поста. 1-пост, 0-видеопост')),
                ('created_date', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'verbose_name_plural': 'Посты',
                'verbose_name': 'Пост',
            },
        ),
        migrations.CreateModel(
            name='Section',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Название дисциплины')),
                ('is_guest', models.BooleanField(default=False)),
                ('access_section', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='educportal.GroupAccess')),
            ],
            options={
                'verbose_name_plural': 'Дисциплины',
                'verbose_name': 'Дисциплина',
            },
        ),
        migrations.CreateModel(
            name='SuperSection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=10, unique=True, verbose_name='Название супер раздела')),
            ],
            options={
                'verbose_name_plural': 'Супер разделы',
                'verbose_name': 'Супер раздел',
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Заголовок задания')),
                ('task_content', models.TextField(verbose_name='Текст задания')),
                ('serial_number', models.PositiveSmallIntegerField(verbose_name='Порядковый номер задания')),
            ],
            options={
                'verbose_name_plural': 'Задания',
                'verbose_name': 'Задание',
            },
        ),
        migrations.CreateModel(
            name='TaskAnswer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task_answer_content', models.TextField(verbose_name='Текст ответа')),
                ('is_correct', models.BooleanField(default=False, verbose_name='Корректность ответа')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='educportal.Task')),
            ],
            options={
                'verbose_name_plural': 'Ответы на задания',
                'verbose_name': 'Ответ на задание',
            },
        ),
        migrations.CreateModel(
            name='Test',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Название теста')),
                ('allowable_number_errors', models.PositiveSmallIntegerField(default=1, verbose_name='Допустимое количество ошибок')),
                ('created_date', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'verbose_name_plural': 'Тесты',
                'verbose_name': 'Тест',
            },
        ),
        migrations.CreateModel(
            name='Theme',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Название темы')),
                ('created_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('discipline', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='educportal.Section')),
            ],
            options={
                'verbose_name_plural': 'Темы дисциплин',
                'verbose_name': 'Тема дисциплины',
            },
        ),
        migrations.AddField(
            model_name='test',
            name='theme',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='educportal.Theme'),
        ),
        migrations.AddField(
            model_name='task',
            name='test',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='educportal.Test'),
        ),
        migrations.AddField(
            model_name='section',
            name='super_section',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='educportal.SuperSection'),
        ),
        migrations.AddField(
            model_name='post',
            name='theme',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='educportal.Theme'),
        ),
        migrations.AddField(
            model_name='academicgroup',
            name='group_access',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='educportal.GroupAccess'),
        ),
        migrations.AddField(
            model_name='user',
            name='academic_group',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='educportal.AcademicGroup'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
